
const [reviewResponse, setReviewResponse] = useState(null);

const reviewMyCode = async () => {
    setGeneratingAnswer(true);
    setChatHistory([...chatHistory, { type: 'question', text: 'Review my code in detail' }]);
    const file = selectedFile;

    try {
        const response = await axios({
            url: `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${import.meta.env.VITE_API_GENERATIVE_LANGUAGE_CLIENT}`,
            method: 'post',
            data: {
                contents: [
                    {
                        parts: [
                            {
                                text: `Imagine you are an AI coding assistant named CodeHub. Analyze the following file contents and provide a detailed review (Including: Syntax analysis, Function definition check, Logic analysis, Efficiency check, Readability check) with the following JSON structure:\n\nFile: ${file.name}\n\nContents:\n${file.content}\n\n{
                                    "language": "Python",
                                    "evaluation": [
                                        {
                                            "step": "Syntax Analysis",
                                            "description": "The code fully adheres to Python syntax. No syntax errors like missing colons, parentheses, or incorrect keywords.",
                                            "score": 86
                                        },
                                        {
                                            "step": "Function Definition",
                                            "description": "The \`bubble_sort\` function is correctly defined, taking a list as input and sorting it in place without returning a value.",
                                            "score": 95
                                        },
                                        {
                                            "step": "Logic Analysis",
                                            "description": "The core logic of bubble sort is implemented correctly. However, the outer loop could be optimized to run fewer iterations.",
                                            "score": 90
                                        },
                                        {
                                            "step": "Efficiency Analysis",
                                            "description": "The algorithm has a time complexity of O(n^2). Consider using more efficient sorting algorithms for large datasets.",
                                            "score": 92
                                        },
                                        {
                                            "step": "Readability Analysis",
                                            "description": "Adding comments to explain the purpose of different code sections would enhance readability.",
                                            "score": 80
                                        }
                                    ],
                                    "total_score": 490/500,
                                    "remarks": "Your implementation demonstrates a solid understanding of the bubble sort algorithm. However, there are areas for improvement to optimize the program's performance. Consider exploring algorithm optimization techniques to enhance your code.",
                                    "suggestions": "Learn about quick sort algorithm to compare its performance with bubble sort."
                                }`
                            },
                        ],
                    },
                ],
            },
        });

        const reviewText = response.data.candidates[0].content.parts[0].text;

        setChatHistory([
            ...chatHistory,
            { type: 'question', text: 'Review my code in detail' },
            { type: 'answer', text: reviewText, containsCode: false },
        ]);

        setReviewResponse(reviewText);
    } catch (error) {
        console.log(error);
        setChatHistory([
            ...chatHistory,
            { type: 'question', text: 'Review my code in detail' },
            { type: 'answer', text: 'Sorry - Something went wrong. Please try again!', containsCode: false },
        ]);
    }

    setGeneratingAnswer(false);
};